#!/bin/bash

# Here, we test the test framework using the framework itself, hence the file's name. On its own,
# this would be a pretty poor test (a madman can easily prove to himself that he is sane), so it
# should be run in conjunction with `simple-test`.

[[ -n "${ENYX_REGTEST_DIR-}" ]] || ENYX_REGTEST_DIR=..

. "$ENYX_REGTEST_DIR"/run-tests.sh
. "$ENYX_REGTEST_DIR"/utils-extra.sh

regtest_start

metasuite() {
##################################################################################################

regtest_dir=.

# Replace date and time in the output with placeholders.
replace_date_and_time() {
    local ms=[0-6][0-9]:[0-6][0-9]
    sed -e "s/[0-9]\{4\}-[0-1][0-9]-[0-3][0-9]-[0-2][0-9]:$ms/YYYY-MM-DD-hh:mm:ss/" \
        -e "s/$ms/mm:ss/"
}

metarun() {
    local out=$1
    shift
    "$@" |& replace_date_and_time >> "$out"
}

run=(metarun {out.txt} ./run-example-tests --deterministic)

regtest meta-run-none \
    regtest_launch_in_sequence \
    -- regtest_expect_exit_status 1 \
       regtest_redirect_stdout_to {tmp.txt} \
       ./run-example-tests nosuchtest \
    -- test -f {tmp.txt} -a ! -s {tmp.txt} # (i.e. output is empty)

regtest meta-run-all \
    regtest_expect_exit_status 10 \
    "${run[@]}"

regtest meta-run-one-ok \
    "${run[@]}" ascii-hello

regtest meta-run-one-fail \
    regtest_expect_exit_status 10 \
    "${run[@]}" ascii-hello-bad-case-fail

regtest meta-print-all \
    "${run[@]}" --print

regtest meta-list-all \
    "${run[@]}" --list

regtest meta-list-glob \
    "${run[@]}" --list 'ascii-hello-color*' 'unicode*'

regtest meta-generate \
    regtest_env REGTEST_REFDIR={tmp.refdir} \
    regtest_launch_in_sequence \
    -- mkdir {tmp.refdir} \
    -- regtest_expect_exit_status 10 \
       "${run[@]}" ascii-hello-color ascii-hello-color-bad-ref-fail \
    -- "${run[@]}" --generate ascii-hello-color ascii-hello-color-bad-ref-fail \
    -- "${run[@]}" ascii-hello-color ascii-hello-color-bad-ref-fail

regtest meta-forward \
    "${run[@]}" --forward ascii-hello

metarun_regtest_lines_only() {
    local out=$1
    shift
    "$@" |& grep REGTEST | replace_date_and_time >> "$out"
}

# Note: We run the "unicode" tests after the "slow" tests to check that even after the "slow" test
# suite times out, the "unicode" test suite runs.
regtest meta-suite-timeout \
    regtest_expect_exit_status 10 \
    regtest_env REGTEST_SUITE_TIMEOUT=.5s REGTEST_EXAMPLE_SUITE_FILES='slowgrep ascii unicode' \
    metarun_regtest_lines_only {out.txt} ./run-example-tests --deterministic 'slow-*' 'unicode-*'

# == `checksum-files` Tests

metarun_in_dir() {
    local dir=$1 links="run-example-tests $2" origdir
    shift 2
    origdir=$PWD
    mkdir -p "$dir"
    (
        cd "$dir"
        trap 'rm $links && rm -rf out log' EXIT
        for l in $links; do
            ln -s "$origdir/$l" ./
        done
        ENYX_REGTEST_DIR=$origdir/.. "$@"
    )
}

checksum_env=(
    regtest_env LANG=C \
                REGTEST_EXAMPLE_EXTRA_SETUP='. $ENYX_REGTEST_DIR/checksum-files.sh' \
                REGTEST_EXAMPLE_SUITE_FILES='ascii misc'
)

checksum_run=(
    "${checksum_env[@]}" \
    metarun {out.txt} \
    metarun_in_dir
)

# Check that checksum is computed and saved.
regtest meta-checksum-file \
    "${checksum_run[@]}" {out.dir} 'tests inputs refs' \
    ./run-example-tests ascii-hello-color

# Check that checksum is computed (and saved) when the output is a directory.
regtest meta-checksum-file-dir \
    "${checksum_run[@]}" {out.dir} 'tests inputs refs' \
    ./run-example-tests misc-dir-output

# Check that both checksums are computed and saved.
regtest meta-checksum-file-both \
    "${checksum_run[@]}" {out.dir} 'tests inputs refs' \
    ./run-example-tests --deterministic ascii-hello-color misc-dir-output

checksum_file={ref}/$regtest_prev_test.dir/reference-md5sums

checksum_run_with_existing_checksumfile() {
    local out=$1 dir=$2 checksum_file=$3
    shift 3
    mkdir "$dir" "$dir"/refs
    touch "$dir"/refs/{ascii-hello-color.txt,misc-dir-output.dir}
    [[ -n "$checksum_file" ]] && cp "$checksum_file" "$dir"
    "${checksum_env[@]}" \
    metarun "$out" \
    metarun_in_dir "$dir" 'tests inputs' "$@"
}

# Check that when checksums are already present (and they match), the reference files are ignored.
regtest meta-checksum-file-existing-checksum \
    checksum_run_with_existing_checksumfile {out.txt} {tmp.dir} "$checksum_file" \
    ./run-example-tests --deterministic ascii-hello-color misc-dir-output

regtest meta-checksum-file-bad-files-no-checksum \
    checksum_run_with_existing_checksumfile /dev/stdout {tmp.dir} '' \
    regtest_expect_exit_status 10 \
    ./run-example-tests --deterministic ascii-hello-color misc-dir-output

regtest meta-checksum-file-bad-checksum-no-diff \
    regtest_launch_in_sequence \
    -- mkdir {tmp.dir} \
    -- cp "$checksum_file" {tmp.dir} \
    -- sed -i 's/[0-f][0-f][0-f][0-f] /0000 /' {tmp.dir}/reference-md5sums \
    -- "${checksum_run[@]}" {tmp.dir} 'tests inputs refs' \
       regtest_expect_exit_status 10 \
       ./run-example-tests ascii-hello-color misc-dir-output

##################################################################################################
}
regtest_run_suite metasuite metasuite

regtest_finish
