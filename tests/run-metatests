#!/usr/bin/env bash

# Here, we test the test framework using the framework itself, hence the file's name. On its own,
# this would be a pretty poor test (a madman can easily prove to himself that he is sane), so it
# should be run in conjunction with `simple-test`.

set -eu

[[ -n "${ENYX_REGTEST_DIR-}" ]] || ENYX_REGTEST_DIR=../lib

. "$ENYX_REGTEST_DIR"/run-tests.sh
. "$ENYX_REGTEST_DIR"/utils-extra.sh

[[ "$BASH_VERSION" == 4.[12].* ]] && {
    # Bash 4.{1,2} insist on printing "Terminated" messages on subshell exit in certain cases...
    # It's easier to filter these messages out here than trying to fix this silly display bug, for
    # old versions of bash no less.
    regtest_ref_diff() {
        local out_name=$1 ref=$regtest_refdir/$out_name out=$regtest_outdir/$out_name
        [[ -f "$out" ]] && {
            grep -v 'Terminated.*regtest_kill_children_on_exit' "$out" > "$out.tmp"
            mv "$out.tmp" "$out"
        }
        diff -qr "$ref" "$out" >/dev/null || {
            if [[ $? == 1 ]]; then return 1
            else return $_regtest_ret_fatal
            fi
        }
    }
}

metasuite() {
##################################################################################################

regtest_dir=example

# Replace date and time in the output with placeholders.
replace_date_and_time() {
    local ms=[0-6][0-9]:[0-6][0-9]
    sed -e "s/[0-9]\{4\}-[0-1][0-9]-[0-3][0-9]-[0-2][0-9]:$ms\(\.[0-9]\+\)\?/YYYY-MM-DD-hh:mm:ss/" \
        -e "s/$ms/mm:ss/"
}

metarun() {
    local out
    out=$(readlink -f "$1")
    shift
    (cd example && "$@") |& tee /dev/stderr | replace_date_and_time >> "$out"
}

run=(metarun {out.txt} ./run-tests --deterministic)

regtest meta-run-none \
    regtest_expect_exit_status 12 \
    "${run[@]}" nosuchtest

regtest meta-run-all \
    regtest_expect_exit_status 10 \
    "${run[@]}"

regtest meta-run-one-ok \
    "${run[@]}" ascii-hello

regtest meta-run-one-fail \
    regtest_expect_exit_status 10 \
    "${run[@]}" ascii-hello-bad-case-fail

regtest meta-print-all \
    "${run[@]}" --print

regtest meta-list-all \
    "${run[@]}" --list

regtest meta-list-glob \
    "${run[@]}" --list 'ascii-hello-color*' 'unicode*'

regtest meta-list-glob-unmatched \
    regtest_expect_exit_status 12 \
    "${run[@]}" --list 'nosuchtest' 'ascii-hello' 'nosuchtest*' 'nosuchtest'

regtest meta-run-glob-unmatched \
    regtest_expect_exit_status 12 \
    "${run[@]}" 'nosuchtest' 'ascii-hello' 'nosuchtest*' 'nosuchtest'

with_refdir() {
    regtest_env REGTEST_REFDIR="$(readlink -f "$1")" "${@:2}"
}

regtest meta-generate \
    with_refdir {tmp.refdir} \
    regtest_launch_in_sequence \
    -- mkdir {tmp.refdir} \
    -- regtest_expect_exit_status 10 \
       "${run[@]}" ascii-hello-color ascii-hello-color-bad-ref-fail \
    -- "${run[@]}" --generate ascii-hello-color ascii-hello-color-bad-ref-fail \
    -- "${run[@]}" ascii-hello-color ascii-hello-color-bad-ref-fail

regtest meta-forward \
    "${run[@]}" --forward ascii-hello

metarun_regtest_lines_only() {
    local out
    out=$(readlink -f "$1")
    shift
    (cd example && "$@") |& tee /dev/stderr |
    grep '{\[regtest\]}' | replace_date_and_time >> "$out"
}

# Note: We run the "unicode" tests after the "slow" tests to check that even after the "slow" test
# suite times out, the "unicode" test suite runs.
timeout_test() {
    regtest "$1" \
        regtest_env REGTEST_SUITE_TIMEOUT="$2" \
                    REGTEST_EXAMPLE_SUITE_FILES='slowgrep ascii unicode' \
        regtest_expect_exit_status 10 \
        metarun_regtest_lines_only {out.txt} \
        ./run-tests --deterministic 'slow-*' 'unicode-*'
}

timeout_test meta-suite-timeout                      .1s
timeout_test meta-suite-timeout2-absolute-killed     .1s+.2s
timeout_test meta-suite-timeout2-relative-killed     .1s+*2
timeout_test meta-suite-timeout2-relative-not-killed .4s+*2.5

kill_after() {
(
    local t=$1 pid=$BASHPID
    shift
    regtest_kill_children_on_exit
    { sleep "$t"; kill $pid; } &
    "$@"
)
}

# Check that the test (slow-hello-2) stops when killed, that it is reported as "interrupted", that
# the suite (slowgrep) is reported as "killed", and that a summary is still printed at the end.
regtest meta-suite-killed \
    regtest_env REGTEST_EXAMPLE_SUITE_FILES='ascii slowgrep unicode' \
    regtest_expect_exit_status 143 \
    metarun_regtest_lines_only {out.txt} \
    kill_after .5s \
    ./run-tests --deterministic ascii-hello 'slow-*' 'unicode-*'

regtest meta-loglevel-suite \
    regtest_expect_exit_status 10 \
    "${run[@]}" --log-level suite ascii-hello ascii-hello-bad-case-fail 'unicode*'

regtest meta-loglevel-error \
    regtest_expect_exit_status 10 \
    "${run[@]}" --log-level error ascii-hello ascii-hello-bad-case-fail 'unicode*'

regtest meta-loglevel-error-noerror \
    "${run[@]}" --log-level error ascii-hello 'unicode*'

# == `checksum-files` Tests

checksum_metarun() {
    local out dir=$2 links="run-tests $3" origdir
    out=$([[ "$1" == /* ]] && printf '%s' "$1" || printf '%s' "$PWD/$1")
    shift 3
    origdir=$PWD
    mkdir -p "$dir"
    (
        export ENYX_REGTEST_DIR=$(readlink -f "$ENYX_REGTEST_DIR")
        cd "$dir"
        trap 'rm $links && rm -rf out log' EXIT
        for l in $links; do
            ln -s "$origdir/example/$l" ./
        done
        export LANG=C `# force gawk error message to be in english #` \
               REGTEST_EXAMPLE_EXTRA_SETUP='. "$ENYX_REGTEST_DIR"/checksum-files.sh' \
               REGTEST_EXAMPLE_SUITE_FILES='ascii misc'
        "$@" |& tee /dev/stderr | replace_date_and_time >> "$out"
    )
}

# Check that checksum is computed and saved.
regtest meta-checksum-file \
    checksum_metarun {out.txt} {out.dir} 'tests inputs refs' \
    ./run-tests ascii-hello-color

# Check that checksum is computed (and saved) when the output is a directory.
regtest meta-checksum-file-dir \
    checksum_metarun {out.txt} {out.dir} 'tests inputs refs' \
    ./run-tests misc-dir-output

# Check that both checksums are computed and saved.
regtest meta-checksum-file-both \
    checksum_metarun {out.txt} {out.dir} 'tests inputs refs' \
    ./run-tests --deterministic ascii-hello-color misc-dir-output

checksum_file={ref}/$regtest_prev_test.dir/reference-md5sums

checksum_metarun_with_existing_checksumfile() {
    local out=$1 dir=$2 checksum_file=$3
    shift 3
    mkdir "$dir" "$dir"/refs
    touch "$dir"/refs/{ascii-hello-color.txt,misc-dir-output.dir}
    [[ -n "$checksum_file" ]] && cp "$checksum_file" "$dir"
    checksum_metarun "$out" "$dir" 'tests inputs' "$@"
}

# Check that when checksums are already present (and they match), the reference files are ignored.
regtest meta-checksum-file-existing-checksum \
    checksum_metarun_with_existing_checksumfile {out.txt} {tmp.dir} "$checksum_file" \
    ./run-tests --deterministic ascii-hello-color misc-dir-output

# Check that an error is reported when no checksums can be found and the references files don't
# match.
regtest meta-checksum-file-bad-files-no-checksum \
    checksum_metarun_with_existing_checksumfile /dev/stdout {tmp.dir} '' \
    regtest_expect_exit_status 10 \
    ./run-tests --deterministic ascii-hello-color misc-dir-output

# Check that a bad checksum results in an error even if the output files are identical to their
# respective reference files.
regtest meta-checksum-file-bad-checksum-no-diff \
    regtest_launch_in_sequence \
    -- mkdir {tmp.dir} \
    -- cp "$checksum_file" {tmp.dir} \
    -- sed -i 's/[0-f][0-f][0-f][0-f] /0000 /' {tmp.dir}/reference-md5sums \
    -- regtest_expect_exit_status 10 \
       checksum_metarun {out.txt} {tmp.dir} 'tests inputs refs' \
       ./run-tests --deterministic ascii-hello-color misc-dir-output

##################################################################################################
}

regtest_run_suite_func metasuite metasuite
